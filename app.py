import streamlit as st
import pandas as pd
import io
import matplotlib.pyplot as plt
from datetime import datetime

# ------------------------------
# üîê S√©curit√© : acc√®s par mot de passe
# ------------------------------
CORRECT_PASSWORD = "Passerelle2025"

password = st.text_input("üîí Veuillez entrer le mot de passe pour acc√©der √† l'outil :", type="password")

if password != CORRECT_PASSWORD:
    st.warning("Mot de passe incorrect ou manquant. Veuillez entrer le bon mot de passe.")
    st.stop()

# ------------------------------
# TITRE & UPLOAD
# ------------------------------
st.title("üß≠ Outil de passerelles m√©tiers")

st.markdown("""
---
üëã Bienvenue dans l'outil de passerelles m√©tiers !

Cet outil vous permet d‚Äôidentifier les **passerelles m√©tiers possibles** entre les m√©tiers d‚Äôun client (ex : secteur pharmaceutique) et ceux du r√©f√©rentiel ROME, sur la base des **macro-comp√©tences partag√©es**.

---

### üß© √âtapes √† suivre :
1. **Charger les deux fichiers Excel**.
2. **Choisir le type de passerelle** (entrante ou sortante).
3. **S√©lectionner les dimensions de comp√©tences** √† prendre en compte ainsi que leur **pond√©ration**.
4. **Filtrer par secteur** si besoin, puis **choisir un m√©tier de d√©part**.
5. üìä Obtenez les passerelles les plus proches et **t√©l√©chargez les r√©sultats**.
6. (Facultatif) üì¶ G√©n√©rez **l‚Äôint√©gralit√© des passerelles** sans aucun filtre.

---
""")

st.markdown("###\n**üìö 1. Charger le fichier des comp√©tences ROME (MACRO-COMPETENCES ROME.xlsx)**")
fichier_competences = st.file_uploader("", type="xlsx", key="competences")
st.markdown("###\n**üè¢ 2. Charger le fichier des m√©tiers client**")
st.markdown("""
<small>‚ÑπÔ∏è Le fichier m√©tiers client doit contenir **une colonne intitul√©e `Code ROME`**, avec un code ROME par ligne (ex : M1805).<br>
Autres colonnes (intitul√©, descriptions‚Ä¶) facultatives.</small>
""", unsafe_allow_html=True)
fichier_client = st.file_uploader("", type="xlsx", key="client")

if fichier_competences and fichier_client:
    # ------------------------------
    # CHOIX DU MODE ET DES OPTIONS
    # ------------------------------
    st.markdown("###\n**üîç 3. Type de passerelle**")
    mode = st.radio("", ["Passerelle entrante", "Passerelle sortante"])

    st.markdown("###\n**üéØ 4. Cat√©gories de comp√©tences**")
    col1, col2, col3 = st.columns(3)
    with col1:
        avec_savoir_faire = st.checkbox("Savoir-faire", value=True)
    with col2:
        avec_savoir_etre = st.checkbox("Savoir-√™tre professionnels", value=True)
    with col3:
        avec_savoirs = st.checkbox("Savoirs", value=True)

    st.markdown("###\n**‚öñÔ∏è 5. Pond√©ration des cat√©gories de comp√©tences (total = 100%)**")
    col_w1, col_w2, col_w3 = st.columns(3)

    with col_w1:
        poids_sf = st.number_input("üõ†Ô∏è Savoir-faire (%)", min_value=0, max_value=100, value=20, step=5, disabled=not avec_savoir_faire)

    with col_w2:
        poids_se = st.number_input("ü§ù Savoir-√™tre (%)", min_value=0, max_value=100, value=20, step=5, disabled=not avec_savoir_etre)

    with col_w3:
        poids_savoirs = st.number_input("üìö Savoirs (%)", min_value=0, max_value=100, value=60, step=5, disabled=not avec_savoirs)

    # Calcul dynamique selon cases coch√©es
    total_pondere = 0
    if avec_savoir_faire:
        total_pondere += poids_sf
    if avec_savoir_etre:
        total_pondere += poids_se
    if avec_savoirs:
        total_pondere += poids_savoirs

    if total_pondere != 100:
        st.error("‚ùå La somme des pond√©rations doit √™tre √©gale √† 100% pour les cat√©gories s√©lectionn√©es.")
        st.stop()

    # Liste des cat√©gories s√©lectionn√©es
    categories_selectionnees = []
    if avec_savoir_faire:
        categories_selectionnees.append("Savoir-faire")
    if avec_savoir_etre:
        categories_selectionnees.append("Savoir-√™tre professionnels")
    if avec_savoirs:
        categories_selectionnees.append("Savoirs")
    
    if not categories_selectionnees:
        st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins une cat√©gorie de comp√©tence (savoir-faire, savoir-√™tre professionnels ou savoirs).")
        st.stop() 

    # Chargement unique depuis l'onglet centralis√©
    df_comp_brut = pd.read_excel(fichier_competences, sheet_name="Macro-Comp√©tences")
    df_comp = df_comp_brut[df_comp_brut["Cat√©gorie"].isin(categories_selectionnees)].copy()
    df_comp = df_comp.dropna(subset=["Code M√©tier", "Intitul√©", "Macro Comp√©tence"])  # Nettoyage

    # Chargement des m√©tiers client
    df_client = pd.read_excel(fichier_client)
    codes_client = df_client["Code ROME"].dropna().unique()

    # D√©finir m√©tiers de d√©part et d'arriv√©e selon le mode
    if mode == "Passerelle entrante":
        df_depart = df_comp.copy()  # Tous les m√©tiers (ROME + client)
        df_arrivee = df_comp[df_comp["Code M√©tier"].isin(codes_client)]
    else:
        df_depart = df_comp[df_comp["Code M√©tier"].isin(codes_client)]
        df_arrivee = df_comp[~df_comp["Code M√©tier"].isin(codes_client)]


    # Liste des m√©tiers de d√©part disponibles
    metiers_depart = df_depart[["Code M√©tier", "Intitul√©"]].drop_duplicates().sort_values("Intitul√©")

    # Dictionnaire de correspondance lettre ‚Üí secteur
    secteurs = {
        "A": "Agriculture et P√™che, Espaces naturels et Espaces verts, Soins aux animaux",
        "B": "Arts et Fa√ßonnage d'ouvrages d'art",
        "C": "Banque, Assurance, Immobilier",
        "D": "Commerce, Vente et Grande distribution",
        "E": "Communication, M√©dia et Multim√©dia",
        "F": "Construction, B√¢timent et Travaux publics",
        "G": "H√¥tellerie-Restauration, Tourisme, Loisirs et Animation",
        "H": "Industrie",
        "I": "Installation et Maintenance",
        "J": "Sant√©",
        "K": "Services √† la personne et √† la collectivit√©",
        "L": "Spectacle",
        "M": "Support √† l'entreprise",
        "N": "Transport et Logistique"
    }

    # Lettres pr√©sentes dans les m√©tiers de d√©part
    lettres_disponibles = df_depart["Code M√©tier"].str[0].unique()
    secteurs_disponibles = {lettre: secteurs[lettre] for lettre in lettres_disponibles if lettre in secteurs}

    # Construction des options de filtre secteur
    options_secteurs = ["Tous les secteurs"] + [f"{lettre} - {secteurs[lettre]}" for lettre in sorted(secteurs_disponibles)]

    # Initialisation du filtre secteur en session_state
    if "secteur_selectionne" not in st.session_state:
        st.session_state["secteur_selectionne"] = "Tous les secteurs"

    # Menu d√©roulant secteur
    st.markdown("###\n**üóÇÔ∏è 6. Secteur d'activit√©**")
    secteur_selectionne = st.selectbox(
        "",
        options=options_secteurs,
        index=options_secteurs.index(st.session_state["secteur_selectionne"]),
        key="secteur_selectionne"
    )

    # Filtrage des m√©tiers de d√©part si un secteur est s√©lectionn√©
    if secteur_selectionne == "Tous les secteurs":
        metiers_filtr√©s = metiers_depart.copy()
    else:
        lettre_selectionnee = secteur_selectionne.split(" - ")[0]
        metiers_filtr√©s = metiers_depart[metiers_depart["Code M√©tier"].str.startswith(lettre_selectionnee)]

    # Liste des m√©tiers de d√©part disponibles
    st.markdown("###\n**üë§ 7. M√©tier de d√©part**")
    metiers_filtr√©s["Affichage"] = metiers_filtr√©s["Code M√©tier"] + " - " + metiers_filtr√©s["Intitul√©"]
    choix_affichage = st.selectbox("", options=metiers_filtr√©s["Affichage"].tolist())
    code_selectionne = metiers_filtr√©s[metiers_filtr√©s["Affichage"] == choix_affichage]["Code M√©tier"].values[0]
    choix_metier = metiers_filtr√©s[metiers_filtr√©s["Code M√©tier"] == code_selectionne]["Intitul√©"].values[0]


    # Code m√©tier s√©lectionn√©
    code_selectionne = metiers_depart[metiers_depart["Intitul√©"] == choix_metier]["Code M√©tier"].values[0]

    # Macro-comp√©tences du m√©tier s√©lectionn√©
    competences_selection = set(df_depart[df_depart["Code M√©tier"] == code_selectionne]["Macro Comp√©tence"].dropna())

    # Calcul des similarit√©s avec les m√©tiers d'arriv√©e
    lignes_resultats = []
    lettre_depart = code_selectionne[0]

    for code_metier, groupe in df_arrivee.groupby("Code M√©tier"):
        if code_metier == code_selectionne:
            continue  # On saute si c'est le m√™me m√©tier
        intitule = groupe["Intitul√©"].iloc[0]
        competences_metier = set(groupe["Macro Comp√©tence"].dropna())
        intersection = competences_selection & competences_metier
        score = len(intersection)
        if score > 0:
            for comp in intersection:
                # On r√©cup√®re la cat√©gorie depuis le df_arrivee
                categorie = groupe[groupe["Macro Comp√©tence"] == comp]["Cat√©gorie"].iloc[0]
                    # Appliquer le poids en fonction de la cat√©gorie
                if categorie == "Savoir-faire":
                    poids = poids_sf
                elif categorie == "Savoir-√™tre professionnels":
                    poids = poids_se
                elif categorie == "Savoirs":
                    poids = poids_savoirs
                else:
                    poids = 0  # s√©curit√©

                bonus = 1.25 if code_metier.startswith(lettre_depart) else 1
                score_pondere_final = (score * poids / 100) * bonus
                
                lignes_resultats.append({
                    "Code M√©tier": code_metier,
                    "Intitul√©": intitule,
                    "Nb de passerelles communes": score,
                    "Score pond√©r√©": score * poids / 100,
                    "Cat√©gorie": categorie,
                    "Comp√©tence commune": comp
                })

    if lignes_resultats:
        df_resultats_complets = pd.DataFrame(lignes_resultats)

        # Affichage top 20 pour l'√©cran
        top_metiers = (
            df_resultats_complets.groupby(["Code M√©tier", "Intitul√©"])
            .agg({
                "Score pond√©r√©": "sum",
                "Comp√©tence commune": "count"
            })
            .reset_index()
            .rename(columns={
                "Score pond√©r√©": "Score pond√©r√© total",
                "Comp√©tence commune": "Nombre de comp√©tences partag√©es"
            })
            .sort_values("Score pond√©r√© total", ascending=False)
            .head(20)
        )
        st.markdown("###\n### üåü Top 20 des passerelles propos√©es :")
        st.dataframe(top_metiers)

        # üîç Graphique des scores (bar chart)
        # üîÅ Cr√©er un tableau crois√© avec Score pond√©r√© par cat√©gorie
        df_pivot = df_resultats_complets.pivot_table(
            index=["Code M√©tier", "Intitul√©"],
            columns="Cat√©gorie",
            values="Score pond√©r√©",
            aggfunc="sum",
            fill_value=0
        ).reset_index()

        # üîÅ Recalcul du score total pour tri
        df_pivot["Score total"] = df_pivot[categories_selectionnees].sum(axis=1)
        df_pivot = df_pivot.sort_values("Score total", ascending=False).head(20)

        # üîç Graphique empil√©
        st.markdown("### üìä R√©partition des scores pond√©r√©s par type de comp√©tence")
        fig, ax = plt.subplots(figsize=(8, 6))

        bottom = None
        labels = df_pivot["Intitul√©"]

        # Colorer chaque barre selon la cat√©gorie
        for cat in categories_selectionnees:
            ax.barh(labels, df_pivot[cat], left=bottom, label=cat)
            if bottom is None:
                bottom = df_pivot[cat].copy()
            else:
                bottom += df_pivot[cat]

        ax.invert_yaxis()
        ax.set_xlabel("Score pond√©r√©")
        ax.set_title("Top 20 m√©tiers ‚Äì scores par type de comp√©tence")
        ax.legend(title="Cat√©gorie")

        st.pyplot(fig)

        # Filtres et formats Excel
        df_filtr√© = df_resultats_complets.copy()
        categories_str = ", ".join(categories_selectionnees)

        # Ajouter le score pond√©r√© total dans df_filtr√©
        df_scores = (
            df_filtr√©.groupby(["Code M√©tier", "Intitul√©"])["Score pond√©r√©"]
            .sum()
            .reset_index()
            .rename(columns={"Score pond√©r√©": "Score pond√©r√© total"})
        )

        # Merge avec le fichier filtr√© ligne par ligne
        df_filtr√© = df_filtr√©.merge(df_scores, on=["Code M√©tier", "Intitul√©"], how="left")

        # R√©organiser les colonnes et supprimer "Score pond√©r√©"
        colonnes_ordre = [
            "Code M√©tier",
            "Intitul√©",
            "Score pond√©r√© total",
            "Nb de passerelles communes",
            "Cat√©gorie",
            "Comp√©tence commune"
        ]
        df_filtr√© = df_filtr√©[colonnes_ordre]

        # Trier par Score pond√©r√© total d√©croissant
        df_filtr√© = df_filtr√©.sort_values(
            by=["Score pond√©r√© total", "Code M√©tier", "Intitul√©"],
            ascending=[False, True, True]
        )

        def exporter_excel(df, titre_feuille, nom_fichier):
            buffer = io.BytesIO()
            with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
                workbook = writer.book
                worksheet = workbook.add_worksheet(titre_feuille)
                writer.sheets[titre_feuille] = worksheet

                format_titre = workbook.add_format({'bold': True, 'font_size': 14})
                format_soustitre = workbook.add_format({'italic': True})

                # √âcriture du titre et des dimensions choisies
                worksheet.write("A1", f"M√©tier de d√©part : {choix_metier}", format_titre)
                worksheet.write("A2", f"Dimensions s√©lectionn√©es : {categories_str}", format_soustitre)
                # D√©finir les pond√©rations appliqu√©es (selon s√©lection)
                pond_list = []
                if avec_savoir_faire:
                    pond_list.append(f"Savoir-faire = {poids_sf}%")
                if avec_savoir_etre:
                    pond_list.append(f"Savoir-√™tre professionnels = {poids_se}%")
                if avec_savoirs:
                    pond_list.append(f"Savoirs = {poids_savoirs}%")

                pond_str = " / ".join(pond_list)
                worksheet.write("A3", f"Pond√©rations appliqu√©es : {pond_str}", format_soustitre)

                date_export = datetime.now().strftime("%d/%m/%Y √† %Hh%M")
                worksheet.write("A4", f"Date d‚Äôexport : {date_export}", format_soustitre)

                # Export des donn√©es √† partir de la ligne 6 (index 5)
                df.to_excel(writer, index=False, startrow=5, sheet_name=titre_feuille)

                # Ajustement automatique de la largeur des colonnes
                for i, col in enumerate(df.columns):
                    column_len = max(df[col].astype(str).map(len).max(), len(col)) + 2
                    worksheet.set_column(i, i, column_len)

            return buffer.getvalue()

        # ‚¨áÔ∏è Bouton 1 : T√©l√©charger uniquement les passerelles filtr√©es (score > 3)
        st.download_button(
            label="üì• T√©l√©charger les passerelles",
            data=exporter_excel(df_filtr√©, "Passerelles filtr√©es", "passerelles_filtrees.xlsx"),
            file_name="passerelles_filtrees.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

        with st.expander("üì¶ T√©l√©charger toutes les passerelles (brutes)"):
            if st.button("‚û°Ô∏è G√©n√©rer toutes les passerelles sans aucun filtre"):

                st.markdown("###\n### ‚è≥ G√©n√©ration des passerelles brutes...")

                # Rechargement brut
                df_brut = pd.read_excel(fichier_competences, sheet_name="Macro-Comp√©tences")
                df_brut = df_brut.dropna(subset=["Code M√©tier", "Intitul√©", "Macro Comp√©tence"])

                df_metiers_client = pd.read_excel(fichier_client)
                codes_client_brut = df_metiers_client["Code ROME"].dropna().unique()

                df_metiers_client = df_brut[df_brut["Code M√©tier"].isin(codes_client_brut)]
                df_metiers_hors_client = df_brut[~df_brut["Code M√©tier"].isin(codes_client_brut)]

                # Fonction de calcul avec barre de progression
                def calculer_passerelles(metiers_depart, metiers_arrivee, progress_bar=None):
                    lignes = []
                    total = len(metiers_depart["Code M√©tier"].unique())
                    for i, (code_depart, groupe_depart) in enumerate(metiers_depart.groupby("Code M√©tier")):
                        intitule_depart = groupe_depart["Intitul√©"].iloc[0]
                        competences_depart = set(groupe_depart["Macro Comp√©tence"].dropna())
                        for code_arrivee, groupe_arrivee in metiers_arrivee.groupby("Code M√©tier"):
                            intitule_arrivee = groupe_arrivee["Intitul√©"].iloc[0]
                            competences_arrivee = set(groupe_arrivee["Macro Comp√©tence"].dropna())
                            intersection = competences_depart & competences_arrivee
                            if intersection:
                                for comp in intersection:
                                    # Cherche cat√©gorie dans le groupe d‚Äôarriv√©e (prioritaire) ou de d√©part
                                    if comp in groupe_arrivee["Macro Comp√©tence"].values:
                                        cat = groupe_arrivee[groupe_arrivee["Macro Comp√©tence"] == comp]["Cat√©gorie"].iloc[0]
                                    else:
                                        cat = groupe_depart[groupe_depart["Macro Comp√©tence"] == comp]["Cat√©gorie"].iloc[0]

                                    lignes.append({
                                        "Code M√©tier D√©part": code_depart,
                                        "Intitul√© D√©part": intitule_depart,
                                        "Code M√©tier Arriv√©e": code_arrivee,
                                        "Intitul√© Arriv√©e": intitule_arrivee,
                                        "Nombre de comp√©tences partag√©es": len(intersection),
                                        "Cat√©gorie": cat,
                                        "Comp√©tence commune": comp
                                    })

                        if progress_bar:
                            progress_bar.progress((i + 1) / total)
                    return pd.DataFrame(lignes)

                # Calcul des passerelles avec barres de progression
                st.markdown("üîÑ Calcul des passerelles entrantes...")
                bar1 = st.progress(0)
                df_entrantes = calculer_passerelles(df_metiers_hors_client, df_metiers_client, progress_bar=bar1)

                st.markdown("üîÑ Calcul des passerelles sortantes...")
                bar2 = st.progress(0)
                df_sortantes = calculer_passerelles(df_metiers_client, df_metiers_hors_client, progress_bar=bar2)

                st.success("‚úÖ Calcul termin√© ! Pr√™t √† t√©l√©charger")

                # Export Excel
                buffer_brut = io.BytesIO()
                with pd.ExcelWriter(buffer_brut, engine="xlsxwriter") as writer:
                    df_entrantes.to_excel(writer, index=False, sheet_name="Passerelles entrantes")
                    df_sortantes.to_excel(writer, index=False, sheet_name="Passerelles sortantes")

                st.download_button(
                    label="üì• T√©l√©charger le fichier complet des passerelles",
                    data=buffer_brut.getvalue(),
                    file_name="passerelles_brutes.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            else:
                st.info("Cliquez sur le bouton ci-dessus pour lancer le calcul complet.")

    else:
        st.warning("Aucune comp√©tence partag√©e trouv√©e avec les m√©tiers cibles.")
